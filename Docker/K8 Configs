# K8 Nginx-ingress: https://cloud.google.com/kubernetes-engine/docs/tutorials/http-balancer
----------------------
Pod:
----------------------
apiVersion: v1			# API Version in use
kind: Pod			# Resource
metadata:			# Name, Labels for the Resource...
  name: hello-world-po	# Name of the resource Pod
  labels:				# Key-value pairs; can be used to match other Resources
    app: hello-world
spec: 				# Specifications of the Resource
  containers:			# Containers that runs on the Pod.
	- name: hello-world				# Name of the Container
	  image: hashicorp/http-echo	# Image of the Container
	  args:
        - "-text=hello-world"
	  ports:				# Ports exposed (Should also be exposed in corresponding Service)
	    - containerPort: 8080
		  protocol: TCP     	# Protocol type of the port used.
		
----------------------
1.0 Service: To expose hello-world pod to other pods/internet.
----------------------
apiVersion: v1
kind: Service
metadata:
  name: hello-world-svc
spec:
  selector:				
    app: hello-world	              # Service Label to make connection with the Deployment and Pods (app:hello-world)
  ports:
    - port: 80                                    # Service Port
      protocol: TCP
      targetPort: 8080                      # containerPort of Deployment
  type: NodePort		# Can also be ClusterIp(default) which is a virtualIp can only be internally accessed | Loadbalancer provides both internal and external accessed virtualIP.
	• For multi-port we need to explicitly name each port separate.
-----------------------
1.1 Deployment: To create hello-world pod.
-----------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
   name: hello-world-deploy
   namespace: my-namespace      # Optional way to specify the namespace
   labels:                                            #  Deployment Label to make connection with the Service that matches the Label in Service Selector.
     app: hello-world
spec:                                                 # Deployment Specifications
  replicas: 1			# Number of replicas of the pods
  selector:                                        # Deployment connects to the pods through 'matchLabels' that were matched. Deployment knows which pods belongs to it.
    matchLabels:
	  app: hello-world
  template:				
    metadata:                                  # Pod Specifications
      name: hello-world-po
      labels:
        app: hello-world                  # Pod Label. Used by Deployment and Service to identify its connected Pods.
    spec:                                             
      containers:
        - name: hello-world-container
          image: hashicorp/http-echo
          imagePullPolicy: IfNotPresent          # Policy to pull image, can be Always.
          ports:
            - containerPort: 8080
              protocol: TCP
		  resources:
			requests:
			  cpu: "100m" # K8 scale this pod when atleast 0.1 CPU is available on the node.
	env:
	 - name: MONGO_INITDB_ROOT_USERNAME
	    valueFrom:
	      secretKeyRef:
		name: mongodb-secret
		key: mongo-root-username
	 - name: MONGO_INITDB_ROOT_PASSWORD
	    valueFrom:
	      secretKeyRef:
		name: mongodb-secret
		key: mongo-root-password
	 - name: MONGO_INITDB_ROOT_PASSWORD
	    valueFrom:
	      configMapKeyRef:
		name: mongodb-configmap
		key: database_url
	
------------------------
Secret:  Used to store sensitive info such as passwords, OAuth tokens, ssh keys.
------------------------
apiVersion: v1
kind: Secret
metadata: 
	name: mongodb-secret
type: Opaque                                    # Default which is a key:value pair
data: 
	mongo-root-username: <>     # $echo -n 'username' | base64  --> returns the encoded value.
	mongo-root-password: <>
	
------------------------
ConfigMap: External configs of app running in the Pod used as the env variables.
------------------------
apiVersion: v1
kind: ConfigMap
metadata: 
	name: mongodb-configmap
data: 
  database_url: hello-world-svc

------------------------
1.3 Ingress: Nginx LB to load balance traffic and redirect the request in terms of path.
Ref: https://cloud.google.com/kubernetes-engine/docs/tutorials/http-balancer
	https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-ingress-guide-nginx-example.html
------------------------
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nginx-ingress
spec:
  rules:                                # Routing rules
  - host: myapp.com        # Can use sub-domains with paths instead of single.
    http:
      paths:                           # URL paths
      - path: /*		# Redirects to http://myapp.com/
        backend:
          serviceName: hello-world-svc
          servicePort: 8080
      - path: /v2/*		# Redirects to http://myapp.com /v2/
        backend:
          serviceName: hello-world-svc-2
          servicePort: 8080

	• Configuring TLS Cert - https by adding:               # Secret and Ingress used should be on same NameSpace
	spec:
	  tls:
	  - hosts:
	    - myapp.com
	    secretName: myapp-secret-tls          # Pointing to a 'Secret', which is of type: kubernetes.io/tls
	• If there is a request coming in with no rule mapped to a service, we can configure it to point to a default Backend to handle it and generate a generic error message.
	
------------------------
2.0 nfs-server-deploy: NFS Server for maintaining persistent-volume-for-persistent-data-storage
------------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nfs-server
  labels:
    app: es-nfs
spec:
  replicas: 1
  selector:
    matchLabels:		# how the Deployment finds which Pods to manage; Associates to any pod that matches the specified key-value pair.
      app: es-nfs		# has to match .spec.template.metadata.labels
  template:
    metadata:
	  name: nfs-server
      labels:
        app: es-nfs		# has to match .spec.selector.matchLabels
    spec:
      containers:
      - name: nfs-server
        image: gcr.io/google_containers/volume-nfs:0.8
        ports:
          - name: nfs
            containerPort: 2049
          - name: mountd
            containerPort: 20048
          - name: rpcbind
            containerPort: 111
        securityContext:
          privileged: true
        volumeMounts:                                   # Mounts container volume to the persistent volume claim in 'volumes' section.
          - name: my-volume			
	  mountPath: "/var/www/html"
          - name: gce-pv			# Custom name of the 'volumes' that is attached from PVC.
            mountPath: /exports		# Mounted file path of the nfs container to the gce-nfs-disk.
          - name: config-dir
            mountPath: /etc/config
          - name: secret-dir
            mountPath: /var/lib/secret

      volumes:
        - name: my-volume              # Custom name provided to the attached pvc.
          persistentVolumeClaim:
            claimName: nfs-pvc         # Name of the pvc that is attached to this deployment.
        - name: gce-pvc		# Custom name provided to the attached pvc.
          gcePersistentDisk:		# persistent volume of Google cloud. Can also be "awsElasticBlockStore".
            pdName: gce-nfs-disk	# Name of the created PersistentVolume.
            fsType: ext4
        - name: config-dir
          configMap:                           # ConfigMap and Secrets can be used here to ingest Config/cert files to the pod which are created externally.
            name: demo-configmap
        - name: secret-dir
          secret:                                   # ConfigMap and Secrets can be used here to ingest Config/cert files to the pod which are created externally.
            secretName: demo-secret

------------------------
2.1 nfs-svc: NFS svc to support nfs-server pod
------------------------
apiVersion: v1
kind: Service
metadata:
  name: nfs-svc
  labels:
    app: es-nfs
spec:
  selector:
    name: nfs-server		# Associates to any pod with matched label name=nfs-server.
  ports:
    - name: nfs
      port: 2049
    - name: mountd
      port: 20048
    - name: rpcbind
      port: 111
  type: ClusterIP

------------------------
2.2 persistentVolume: Storage in the cluster that has been provisioned by an administrator.
Ref: https://medium.com/platformer-blog/nfs-persistent-volumes-with-kubernetes-a-case-study-ce1ed6e2c266
https://blog.bigbinary.com/2017/04/12/using-kubernetes-persistent-volume-for-persistent-data-storage.html
https://kubernetes-on-aws.readthedocs.io/en/latest/user-guide/using-volumes.html
------------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv
  labels:
    app: es-nfs
spec:
  capacity:
    storage: 10Gi					# Available PersistentVolume (here nfs).
  accessModes:
    - ReadWriteMany				# Can also be ReadWriteOnce (Only one connection at a time).
  persistentVolumeReclaimPolicy: Retain		# Retain keeps data, whereas Recycle clears.
  nfs:						# PersistentVolume Type: NFS
    server: <ClusterIP> / <service-name>.<namespace>.svc.cluster.local	# Associated nfs server. Can be NFS IP addr 
    path: "/"
  gcePersistentDisk:                                                    # PersistentVolume Type: Google Cloud
    pdName: gce-disk-name
    fsType: ext4

------------------------
StorageClass: Provisions Persistent Volumes dynamically. Requested same as PV. Pod claims storage via PVC --> PVC
	Requests storage from SC --> SC creates PV that meets the needs of claim.
------------------------
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: storage-class-demo
provisioner: kubernetes.io/aws-ebs
parameters:
  type: io1
  iopsPerGB: "10"
  fsType: ext4

------------------------
2.3 persistentVolumeClaim: Consumes PV resources. Can request how much storage they need from the PV.
------------------------
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: nfs-pvc
  namespace: my-namespace
  labels:
    app: es-nfs					# Bounds to PV when the name/labels matches.
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi				# Resource requested from PV.
  storageClassName: storage-class-demo              # Specific to StorageClass; For PV it is manual.
------------------------
2.4 es-deploy: Here we use the above created NFS persistentVolume to store Elasticsearch data
init container: Runs before other containers. useful for running pre-conditions. 
https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
------------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: elasticsearch
  labels:
    app: es-nfs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: es-nfs
  template:
    metadata:
	  name: es-po
      labels:
        app: es-nfs
    spec:
      containers:
      - name: es
	    image: elasticsearch:5-alpine
        imagePullPolicy: Always
        env:
          - name: discovery.type
            value: single-node
        ports:
          - containerPort: 9200
            name: "es-server"
            protocol: TCP
        volumeMounts:					# Mounts container volume to a persistent volume claim(here es-nfs-pvc) that is nfs-pvc.
          - name: es-nfs-pvc
            mountPath: "/usr/share/elasticsearch/data"
	  - name: nginx
	    image: nginx:latest
        imagePullPolicy: Always
		ports:
		  - name: nginx
		    containerPort: 80
			protocol: TCP
		volumeMounts:
		  - name: nginx-config
		    mountPath: /usr/share/nginx/html
	  initContainers:
	  - name: nginx-configs
	    image: busybox
		command:
		- wget
		- "-O"
		- "/work-dir/index.html"
		-  http://kubernetes.io
		volumeMounts:				# Mounting available Deployment Pod volume to the container path. 
		  - name: nginx-config
		    mountPath: "/work-dir"
      volumes:					# Volumes associated to the Deployment Pod.
      - name: es-nfs-pvc
        persistentVolumeClaim:
          claimName: nfs-pvc
	  - name: nginx-config
	    emptyDir: {}		#  Only exists for the life time of the pod.
	
------------------------
Stateful: Manages deployment & scaling of set of pods and provides guarantees about ordering & uniqueness of pods, volumes.
------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
  labels:
    app: nginx-ss
spec:
  ServiceName: nginx-svc		# Service associated to this StatefulSet
  replicas: 1
  selector:
    matchLabels:		# how the Deployment finds which Pods to manage; Associates to any pod that matches the specified key-value pair.
      app: nginx-ss
  template:
    metadata:
	  name: nginx-po
      labels:
        app: nginx-ss
    spec:
      containers:
      - name: nginx
        image: k8s.gcr.io/nginx-slim:0.8
        ports:
          - name: nginx
            containerPort: 80
        volumeMounts:				# Mounts container volume to a persistent volume in gce.
          - name: www			# Name provided in the spec of "volumeClaimTemplates".
		    mountPath: /usr/share/nginx/html		# Mounted file path of the nginx container to the gce disk.
  volumeClaimTemplates:
    - metadata:
	    name: www
	  spec:
	    accessModes: [  "ReadWriteOnce"  ]
		resources:
		  requests:
		    storage: 1Gi
		
------------------------
