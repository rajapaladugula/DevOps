Linux:
-----
1. SSH Troubleshooting: (https://www.digitalocean.com/docs/droplets/resources/troubleshooting-ssh/connectivity/)
    a) Check any on going N/W issues in the region? (Try other servers)
    b) Host Name Resolution error. (Typo in host name?, Try 'ping', Host name/Service doesnt exist!)
    c) Connection Time out (SSH listening on 22? check /etc/ssh/sshd_config,
            Firewall Rules? check firewall-cmd --list-services/ports | iptables -nL
    d) Connection Refused? (SSH Service Running? service ssh status, listening on 22?)
2. Lists Top 10 directories eating disk space in File System /etc
    du -ah /etc/ | sort -n -r | head -n 10
3. System Information: uname -a
4. Ip address: if config, ip addr
5. Disk free: df -ah
6. Disk usage: du -ah
7. Memory: free, vmstat
8. Manage services: service <NAME> status, systemctl status <NAME>
9. Check open ports: netstat -tulpn
10. CPU Usage: top, htop
11. Mounts: mount <VOLUMR_PATH> <MOUNT_POINT> ex: mount /dev/sda1 /opt
    Mount volume at boot: /etc/fstab
12. Zombie process: Child process whose parent is exited. Its process is in terminated state with resources unreleased.
                    Entry still in process table.
13. Generate SSH Keys, Pass less auth: ssh-keygen -t rsa copy the generated public key to remote servers ~/.ssh/authorizedkeys
14. Ports: 21 FTP (File Transfer Protocol)
           22 SSH (Secure Shell)
           23: Telnet
           25: SMTP
           53: DNS
15. SSH Port Forwarding: Bypass Firewalls, Tuneel ports using SSH protocols.

Firewall: (https://www.digitalocean.com/community/tutorials/what-is-a-firewall-and-how-does-it-work)

DevOps:
------
DevOps is a set of cultural norms and technology practices that enable the fast flow of planned work, right from development, through tests into operations while preserving
  world class reliability, operation and security. This involves Continuous Development, Continuous Testing, Continuous Integration, Continuous Deployment and Continuous
  Monitoring of the software throughout its development life cycle.
1. Need: Now a days, Instead of releasing big sets of features, companies are trying to see if small features can be transported to their customers through a series of release trains.
         This has many advantages like quick feedback from customers, better quality of software etc. which in turn leads to high customer satisfaction. In order to acheieve this, companies
         are required to: Increase deployment frequency, Lower failure rate of new releases, Shortened time between fixes, Faster mean time to recovery in the event of new release crashing.
         DevOps fulfills all these requirements and helps in achieving seamless software delivery.
2. Role back stategy: Backup current artificat before deployment | Follow Blue-Green Deployments with testing endpoints inbetween.
3. DR Strategy:  a) Replica(Standby) of current Environment and DNS switch to D.B connection when required.
                 b) maintain multiple availability zones & Load Balancing traffic.
                 c) DNS based switch to route traffic on basis of health checks.
4. Agile | DevOps:  a) Agility in Dev | both Dev & Operations
                    b) emphasize on timeliness | both timeliness & quality
                    c) feedback from customers | self-monitoring
                    d) practices: scrum, kanban | ci, cd, ct, cm
5. 

Configuration Management:
------------------------
1. Ansible/Chef:
      a) Agent-less | Agent, Agent-less
      b) ymal | Ruby

Terraform:
---------

Jenkins:
-------
Plugins: Git, SVN, Maven, Trigger build on other project, Deploy ear/war to container, UpStream/Downstream jobs, E-mail notification

