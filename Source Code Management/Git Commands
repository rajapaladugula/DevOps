      ----------HOW TO PULL AND PUSH REQ IN GIT USING COMMAND LINE----------

# Git Identify
$ git config --global user.name "Raja Paladugula"
$ git config --global user.email rajapaladugula@gmail.com

# Initialize git using ($ git init) which will create .git directory. 
$ git init

# To bookmark a remote git url ($ git remote add ALIAS_NAME GIT_REPO_URL).
$ git remote add DevOps https://github.com/rajapaladugula/DevOps.git

# Clone a Repository from git to local workspace.
$ git clone https://github.com/rajapaladugula/DevOps.git

# To update the local copy with new commits from remote repo ($ git pull ALIAS_NAME BRANCH_NAME) pull = fetch + merge
$ git pull DevOps Master

# After modifying the "working copy" we perform 'add' operation to add all files($ git add .) or specific files($ git add FILE.TXT)
  to the staging area.

# To revert the changes made, use $ git reset <file> to unstage.
  
# difference between the modified files.
$ git diff

# Then we Commit the changes ($ git commit -m "RANDOM_MESSAGE") to Local Repo which displays the insertions, deletions or changes
  made to the file.
$ git commit -m "This is the first commit"

# Displays commits and their description
$ git log

# Push changes to the Repo ($ git push -u ALIAS_NAME BRANCH_NAME) and authenticate. 
$ git push -u DevOps master

# Check the status: which branch are we on? Any left branch commits?
$ git status

# Create a Branch on local machine and swith(checkout) to it.
$ git checkout -b BRANCH_NAME

# displays current working branch and other branches available
$ git branch

# Delete a branch on your local file system
$ git branch -d [name_of_your_new_branch]

# Change working branch.
$ git checkout [name_of_your_new_branch]

# merging branch <BRANCH_NAME> to Current branch present in.
$ git merge <BRANCH_NAME>

# View current remotes.
$ git remote -v

# Remove a remote.
$ git remote rm destination

# Remove Repo
$ git rm <REPO_NAME>

# Update branch on local Repo when the original branch from Remote repository has been updated.
$ git fetch [name_of_your_remote]

stashing: check-point for non-commited changes that saves to temp location. changes in the temp location can be re-applied any where.
$ git stash save 'Comment'
$ git stash list : lists all the stash
$ git stash apply <STASH_ID> : apply stash to a branch.
$ git stash drop : delete a stash
$ git stash clear : Remove all the stash

rebase: integrates branches similar to merge, but in a different way. used when changes made in one branch needs to be reflected
in another branch. Ex: Changes in the current branch were applied to 'master' as well.
$ git rebase <master>
